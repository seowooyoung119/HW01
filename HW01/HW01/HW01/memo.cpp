// HW01.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.

    // 구현 로직
    // 1. 입력을 받는 함수
    // 2. 계산 때리는 함수
    // 3. 출력을 해주는 함수

    // 구체적 로직
    // 1. 입력을 받는 함수 >> 함수명 : getNum
           // -1. 5개의 숫자를 입력 받는다. >> 뭐로 받을 거임? cin 으로 받지 뭐
           // -2. 입력 받은 숫자를 배열에 저장한다. >> 배열명 : Num[5]

    // 2. 계산 때리는 함수 >> 함수명 : PlusNum(합계) / AvrNum(평균) >> 둘이 분리해야할까? 으으으으음
          // -1. 배열에 저장된 숫자들의 합계를 구한다. >> for 써서 전부 더하기
          // -2. 합계의 값을 어딘가 저장한다. >> 합계용 변수명 : PlusNum
          // -3. 배열에 저장된 숫자들의 평균을 구한다. >> for 써서 다 더했으면 그걸 배열의 길이 만큼 나누면 됨 >> 이거 합계 먼저 구하고 포인터로 값 가져오면 굳이 또 일할 필요없지 않나? 
          // -4. 평균의 값을 어딘가 저장한다. >> 평균영 변수명 : AvrNum
          // -5. 출력을 때린다. >> cout 으로 출력

    // 3. 출력을 해주는 함수 >> 따로 만들 필요없? 필요있? 없.


    // 4. 트러블 슈팅
    // - 입력 값이 정수가 아님 >> 정수만 입력하게 
    // - 모든 걸 0으로 하면? >> 별 상관 x
    // - 같은 숫자면 정렬 어떻게 되는 거야? 오 개꿀 버블 정렬하면 알아서 되네





//// 오름차순 버블 정렬 알고리즘 //
//void Math::SortUpto()
//{
//	for (int Counta = 0; Counta < N - 1; ++Counta)
//	{
//		for (int Countb = 0; Countb < N - 1 - Counta; ++Countb)
//		{
//			if (Num[Countb] > Num[Countb + 1])
//			{
//				swap(Num[Countb], Num[Countb + 1]);
//			}
//		}
//	}
////}
//
//// 내림차순 버블 정렬 알고리즘 //
//void Math::SortDownto()
//{
//
//	for (int Counta = 0; Counta < N - 1; ++Counta)
//	{
//		for (int Countb = 0; Countb < N - 1 - Counta; ++Countb)
//		{
//			if (Num[Countb] < Num[Countb + 1])
//			{
//				swap(Num[Countb], Num[Countb + 1]);
//			}
//		}
//	}
//}
//
//
//// 오름차순 내림차순 출력 함수
//void Math::sortNum()
//{
//	string line;
//
//	while (true)
//	{
//		cout << "올림차순은 1번, 내림차순은 2번 : ";
//		cin >> line;
//
//		if (line == "1")
//		{
//			Math::SortUpto();
//			cout << "-------------------------" << endl;
//			cout << "올림차순 정렬 ";
//			for (int Count = 0; Count < N; ++Count)
//				cout << Num[Count];
//			cout << endl;
//			cout << "-------------------------" << endl;
//			break;
//
//		}
//
//		else if (line == "2")
//		{
//			Math::SortDownto();
//			cout << "-------------------------" << endl;
//			cout << "내림차순 정렬 ";
//			for (int Count = 0; Count < N; ++Count)
//				cout << Num[Count];
//			cout << endl;
//			cout << "-------------------------" << endl;
//			break;
//		}
//
//			cout << "-------------------------" << endl;
//			cout << "1번(내림차순) 아니면 2번(올림차순)을 입력하세요." << endl;
//			cout << "-------------------------" << endl;	
//	}
//}
//

 // Num[0] Num[1] Num[2] Num[3] Num[4]      Counta = 0 일 때 (4)
 //     5     4      3      2      1		    / 0 랑 1 주소
 //1	   4     5      3      2      1         / 1 랑 2 주소
 //2	   4     3      5      2      1         / 2 랑 3 주소
 //3	   4     3      2      5      1         / 3 랑 4 주소
 //     4     3      2      1      5            


 // Num[0] Num[1] Num[2] Num[3] Num[4]      Counta = 1 일 때   (3)
 //    4     3      2      1      5 	    / 0 랑 1 주소
 //1	  3     4      2      1      5      / 1 랑 2 주소
 //2	  3     2      4      1      5      / 2 랑 3 주소 
 //3   3     2      1      4      5       									
 //																			



 // Num[0] Num[1] Num[2] Num[3] Num[4]      Counta = 2 일 때   (2)
 //     3     2      1      4      5     / 0 랑 1 주소
 //1	   2     3      1      4      5     / 1 랑 2 주소
 //2	   2     1      3      4      5     
 //3  
 //   


 // Num[0] Num[1] Num[2] Num[3] Num[4]      Counta = 3 일 때   (1)
 //     2     1      3      4      5      / 0 랑 1 주소
 //1	   1     2      3      4      5      / 
 //2	  
 //3  
 //   

 // Num[0] Num[1] Num[2] Num[3] Num[4]      Counta = 4 일 때   (1)
 //     1     2      3      4      5  
 //1	 
 //2	 
 //3  
 //   

